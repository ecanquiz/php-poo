import{_ as e,c as a,o as r,O as o}from"./chunks/framework.a6ecc25e.js";const h=JSON.parse('{"title":"POO","description":"","frontmatter":{},"headers":[],"relativePath":"cap-04-poo-segun-los-manualesobjetos.md"}'),n={name:"cap-04-poo-segun-los-manualesobjetos.md"},t=o('<h1 id="poo" tabindex="-1">POO <a class="header-anchor" href="#poo" aria-label="Permalink to &quot;POO&quot;">‚Äã</a></h1><h2 id="segun-los-manuales" tabindex="-1">Seg√∫n LOS MANUALES <a class="header-anchor" href="#segun-los-manuales" aria-label="Permalink to &quot;Seg√∫n LOS MANUALES&quot;">‚Äã</a></h2><p>Dos fuentes que son confiables y que tenemos m√°s a mano son <a href="https://es.wikipedia.org/wiki/Programaci%C3%B3n_orientada_a_objetos" target="_blank" rel="noreferrer"><strong>Wikipedia</strong></a>, principalmente para consultar los conceptos fundamentales que se aplican a cualquier lenguaje Orientado a Objetos, y <a href="https://www.php.net/manual/es/language.oop5.php" target="_blank" rel="noreferrer"><strong>el manual oficial de PHP</strong></a>, que aunque es un manual de programaci√≥n y no de desarrollo (se concentra m√°s en la sintaxis que en los conceptos), tiene mucho para ense√±arnos (el resto lo haremos a trav√©s de este libro üòâ).</p><blockquote><p>&quot;Depurar c√≥digo es dos veces m√°s dif√≠cil que escribir c√≥digo, por lo tanto si escribes el c√≥digo tan inteligentemente como te sea posible, por definici√≥n no ser√°s lo suficientemente inteligente como para depurarlo.&quot;</p></blockquote><p>Luego de haber le√≠do el cap√≠tulo original en Wikipedia, quiero resaltar los siguientes puntos fundamentales:</p><ol><li><p><strong>La POO es un paradigma que tiene sus or√≠genes desde antes de 1990</strong> (a partir de este a√±o se empieza a popularizar). Por lo tanto no es ninguna excusa (menos como Desarrollador PHP) seguir a la fecha desconociendo c√≥mo trabajar con POO o discutiendo si realmente es √∫til su adopci√≥n.</p></li><li><p><em>‚ÄúLos objetos son entidades que combinan <strong>estado, comportamiento e identidad‚Äù</strong>.</em></p></li><li><p>Fundamental, los beneficios que obtenemos usando este paradigma:</p><ul><li><em>‚ÄúLa programaci√≥n orientada a objetos expresa un programa como un conjunto de estos objetos, que colaboran entre ellos para realizar tareas. Esto permite hacer los programas y m√≥dulos m√°s f√°ciles de escribir, mantener y reutilizar.‚Äù</em></li></ul></li><li><p>La raz√≥n de por qu√© no es necesario que todos los objetos que creemos tengan un ID como si fuera una clave primaria de una tabla (con el fin de ubicar un objeto en particular):</p><ul><li><em>‚ÄúDe esta forma, <strong>un objeto contiene toda la informaci√≥n que permite definirlo e identificarlo frente a otros objetos pertenecientes a otras clases e incluso frente a objetos de una misma clase,</strong> al poder tener valores bien diferenciados en sus atributos.‚Äù</em></li></ul></li><li><p>Diferencias con respecto a la Programaci√≥n Estructurada versus Programaci√≥n Orientada a Objetos: la primera se pens√≥ como funcionalidad por un lado y datos por otro, es decir, llamar a una funci√≥n y pasarle constantemente datos para que los procese, mientras que la POO est√° pensada para tener todo integrado en el mismo objeto.</p><ul><li>‚ÄúEn la programaci√≥n estructurada s√≥lo se escriben funciones que procesan datos. Los programadores que emplean √©ste nuevo paradigma, en cambio, <strong>primero definen objetos para luego enviarles mensajes solicit√°ndoles que realicen sus m√©todos por s√≠ mismos.‚Äù</strong></li></ul></li><li><p><strong>Muy importante es tener SIEMPRE en claro los conceptos FUNDAMENTALES,</strong> si no los tienes claros cuando programas OO, algo est√° mal, seguro errar√°s el camino que define el paradigma: Clase, Herencia, Objeto, M√©todo, Evento, Mensaje, Atributo, Estado Interno, Componentes de un objeto y Representaci√≥n de un objeto. No dudes en volver a repasarlos todas las veces que lo necesites, por m√°s experto que te consideres, siempre viene bien una relectura de nuestras bases.</p></li><li><p><strong>Caracter√≠sticas de la POO:</strong> igual que el punto anterior, es fundamental tener claros estos conceptos cada vez que desarrollamos, con principal √©nfasis en el Principio de Ocultaci√≥n (que es muy com√∫n confundir con Encapsulamiento), lo que explica <strong>por qu√© no deber√≠an existir los atributos p√∫blicos ni abusar de los setter/getter</strong> (tema que veremos m√°s adelante).</p></li></ol><p>Si alguno de estos puntos no quedaron claros, sugiero su relectura en la <a href="https://es.wikipedia.org/wiki/Programaci%C3%B3n_orientada_a_objetos" target="_blank" rel="noreferrer">Wikipedia</a>.</p><h2 id="segun-el-manual-oficial-de-php" tabindex="-1">Seg√∫n el manual Oficial de PHP <a class="header-anchor" href="#segun-el-manual-oficial-de-php" aria-label="Permalink to &quot;Seg√∫n el manual Oficial de PHP&quot;">‚Äã</a></h2><p>De la misma forma que en el punto anterior, es muy importante hacer una lectura de Referencias del Lenguaje (la base para empezar a comprender PHP) y posteriormente del cap√≠tulo sobre POO en el manual oficial, <strong>aunque algunos cap√≠tulos no aborden en profundidad cada tema</strong> (lo cual es entendible si comprendemos que hablamos de <strong>un manual de sintaxis</strong> y no un tutorial para aprender a programar).</p><p>Todos estos temas los veremos m√°s adelante y har√© todas las referencias oportunas al manual oficial, pero aqu√≠ la lista de temas b√°sicos que trata.</p><ul><li><a href="https://www.php.net/manual/es/oop5.intro.php" target="_blank" rel="noreferrer">Introducci√≥n</a></li><li><a href="https://www.php.net/manual/es/language.oop5.basic.php" target="_blank" rel="noreferrer">Lo b√°sico</a></li><li><a href="https://www.php.net/manual/es/language.oop5.properties.php" target="_blank" rel="noreferrer">Propiedades</a></li><li><a href="https://www.php.net/manual/es/language.oop5.constants.php" target="_blank" rel="noreferrer">Constantes de clases</a></li><li><a href="https://www.php.net/manual/es/language.oop5.autoload.php" target="_blank" rel="noreferrer">Autocarga de clases</a></li><li><a href="https://www.php.net/manual/es/language.oop5.decon.php" target="_blank" rel="noreferrer">Constructores y destructores</a></li><li><a href="https://www.php.net/manual/es/language.oop5.visibility.php" target="_blank" rel="noreferrer">Visibilidad</a></li><li><a href="https://www.php.net/manual/es/language.oop5.inheritance.php" target="_blank" rel="noreferrer">Herencia de Objetos</a></li><li><a href="https://www.php.net/manual/es/language.oop5.paamayim-nekudotayim.php" target="_blank" rel="noreferrer">Operador de Resoluci√≥n de √Åmbito (:üòÉ</a></li><li><a href="https://www.php.net/manual/es/language.oop5.static.php" target="_blank" rel="noreferrer">La palabra reservada &#39;static&#39;</a></li><li><a href="https://www.php.net/manual/es/language.oop5.abstract.php" target="_blank" rel="noreferrer">Abstracci√≥n de clases</a></li><li><a href="https://www.php.net/manual/es/language.oop5.interfaces.php" target="_blank" rel="noreferrer">Interfaces de objetos</a></li><li><a href="https://www.php.net/manual/es/language.oop5.traits.php" target="_blank" rel="noreferrer">Rasgos (Traits)</a></li><li><a href="https://www.php.net/manual/es/language.oop5.anonymous.php" target="_blank" rel="noreferrer">Clases an√≥nimas</a></li><li><a href="https://www.php.net/manual/es/language.oop5.overloading.php" target="_blank" rel="noreferrer">Sobrecarga</a></li><li><a href="https://www.php.net/manual/es/language.oop5.iterations.php" target="_blank" rel="noreferrer">Iteraci√≥n de objetos</a></li><li><a href="https://www.php.net/manual/es/language.oop5.magic.php" target="_blank" rel="noreferrer">M√©todos m√°gicos</a></li><li><a href="https://www.php.net/manual/es/language.oop5.final.php" target="_blank" rel="noreferrer">Palabra clave Final</a></li><li><a href="https://www.php.net/manual/es/language.oop5.cloning.php" target="_blank" rel="noreferrer">Clonaci√≥n de Objetos</a></li><li><a href="https://www.php.net/manual/es/language.oop5.object-comparison.php" target="_blank" rel="noreferrer">Comparaci√≥n de Objetos</a></li><li><a href="https://www.php.net/manual/es/language.oop5.late-static-bindings.php" target="_blank" rel="noreferrer">Enlaces est√°ticos en tiempo de ejecuci√≥n</a></li><li><a href="https://www.php.net/manual/es/language.oop5.references.php" target="_blank" rel="noreferrer">Objetos y referencias</a></li><li><a href="https://www.php.net/manual/es/language.oop5.serialization.php" target="_blank" rel="noreferrer">Serializaci√≥n de objetos</a></li><li><a href="https://www.php.net/manual/es/language.oop5.variance.php" target="_blank" rel="noreferrer">Covarianza y Contravarianza</a></li><li><a href="https://www.php.net/manual/es/language.oop5.changelog.php" target="_blank" rel="noreferrer">Registro de cambios de la POO</a></li></ul><blockquote><p><em>&quot;Medir el progreso de programaci√≥n en l√≠neas de c√≥digo es como medir el progreso de construcci√≥n de un avi√≥n en peso&quot; ‚Äì Bill Gates.</em></p></blockquote>',12),s=[t];function l(i,p,u,c,d,m){return r(),a("div",null,s)}const f=e(n,[["render",l]]);export{h as __pageData,f as default};
